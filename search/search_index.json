{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cookiecutter PyPackage \u00b6 Cookiecutter template for a Python package, built with popular develop tools and conform to best practice. Documentation: https://mishamsk.github.io/cookiecutter-pypackage Features \u00b6 This tool will create Python project with the following features: Poetry : Manage dependency, build and release Makefile template for typical operations Mkdocs : Writing your docs in markdown style Testing with Pytest (unittest is still supported out of the box) Code coverage report and endorsed by Codecov Tox : Test your code against environment matrix, lint and artifact check Format with Black and Isort Lint code with Flake8 Check static type with Mypy (optional) Pre-commit hooks : Formatting/linting anytime when commit your code Mkdocstrings : Auto API doc generation Command line interface using Click (optional) bump2version : Pre-configured version bumping with a single command Continuous Integration/Deployment by GitHub actions , includes: publish dev build/official release to TestPyPI/PyPI automatically when CI success publish documents automatically when CI success extract changelog from CHANGELOG and integrate with release notes automatically Host your documentation from GitHub Pages with zero-config Quickstart \u00b6 Install the latest Cookiecutter if you haven't installed it yet (see instruction here ). I suggest using pipx to make it a global tool in an isolated Python environment 1 pipx install cookiecutter Generate a Python package project: 1 cookiecutter https://github.com/mishamsk/cookiecutter-pypackage And code away! Cookiecutter options \u00b6 project_name The name of your new Python package project. This is used in documentation, so spaces and any characters are fine here. project_slug The name of your Python package for PyPI, also as the repository name of GitHub. Typically, it is the slugified version of project_name. pkg_name The namespace of your Python package. This should be Python import-friendly. project_short_description A 1-sentence description of what your Python package does. full_name Your full name. email Your email address. github_username Your GitHub username. version The starting version number of the package. use_mypy If use mypy for static type check in pre-commit hooks and tox. install_precommit_hooks If you choose yes, then cookiecutter will install pre-commit hooks for you. docstrings_style one of google, numpy, pep257 . It's required by flake8-docstrings. command_line_interface Whether to create a console script using Python Click. Console script entry point will match the project_slug. Options: ['click', \"No command-line interface\"] CI/CD setup \u00b6 Except the settings above, you'll also need configure gitub repsitory secrets at page repo > settings > secrtes, and add the following secrets: - PERSONAL_TOKEN (required for publishing document to git pages) - TEST_PYPI_API_TOKEN (required for publishing dev release to testpypi) - PYPI_API_TOKEN (required for publish ) Credits \u00b6 This repo is forked from waynerv/cookiecutter-pypackage , whose origin traces all the way to audreyfeldroy/cookiecutter-pypackage","title":"Introduction"},{"location":"#cookiecutter-pypackage","text":"Cookiecutter template for a Python package, built with popular develop tools and conform to best practice. Documentation: https://mishamsk.github.io/cookiecutter-pypackage","title":"Cookiecutter PyPackage"},{"location":"#features","text":"This tool will create Python project with the following features: Poetry : Manage dependency, build and release Makefile template for typical operations Mkdocs : Writing your docs in markdown style Testing with Pytest (unittest is still supported out of the box) Code coverage report and endorsed by Codecov Tox : Test your code against environment matrix, lint and artifact check Format with Black and Isort Lint code with Flake8 Check static type with Mypy (optional) Pre-commit hooks : Formatting/linting anytime when commit your code Mkdocstrings : Auto API doc generation Command line interface using Click (optional) bump2version : Pre-configured version bumping with a single command Continuous Integration/Deployment by GitHub actions , includes: publish dev build/official release to TestPyPI/PyPI automatically when CI success publish documents automatically when CI success extract changelog from CHANGELOG and integrate with release notes automatically Host your documentation from GitHub Pages with zero-config","title":"Features"},{"location":"#quickstart","text":"Install the latest Cookiecutter if you haven't installed it yet (see instruction here ). I suggest using pipx to make it a global tool in an isolated Python environment 1 pipx install cookiecutter Generate a Python package project: 1 cookiecutter https://github.com/mishamsk/cookiecutter-pypackage And code away!","title":"Quickstart"},{"location":"#cookiecutter-options","text":"project_name The name of your new Python package project. This is used in documentation, so spaces and any characters are fine here. project_slug The name of your Python package for PyPI, also as the repository name of GitHub. Typically, it is the slugified version of project_name. pkg_name The namespace of your Python package. This should be Python import-friendly. project_short_description A 1-sentence description of what your Python package does. full_name Your full name. email Your email address. github_username Your GitHub username. version The starting version number of the package. use_mypy If use mypy for static type check in pre-commit hooks and tox. install_precommit_hooks If you choose yes, then cookiecutter will install pre-commit hooks for you. docstrings_style one of google, numpy, pep257 . It's required by flake8-docstrings. command_line_interface Whether to create a console script using Python Click. Console script entry point will match the project_slug. Options: ['click', \"No command-line interface\"]","title":"Cookiecutter options"},{"location":"#cicd-setup","text":"Except the settings above, you'll also need configure gitub repsitory secrets at page repo > settings > secrtes, and add the following secrets: - PERSONAL_TOKEN (required for publishing document to git pages) - TEST_PYPI_API_TOKEN (required for publishing dev release to testpypi) - PYPI_API_TOKEN (required for publish )","title":"CI/CD setup"},{"location":"#credits","text":"This repo is forked from waynerv/cookiecutter-pypackage , whose origin traces all the way to audreyfeldroy/cookiecutter-pypackage","title":"Credits"},{"location":"console_script_setup/","text":"Console Script Setup \u00b6 Optionally, your package can include a console script using Click . How It Works \u00b6 If the command_line_interface option is set to click during setup, cookiecutter will add a file cli.py in the pkg_name subdirectory. An entry point is added to pyproject.toml that points to the main function in cli.py. Usage \u00b6 To use the console script in development: 1 poetry install Then execute: 1 $project_slug --help it will show your package name, project short description and exit. More Details \u00b6 You can read more about Python Click at Click .","title":"Console script"},{"location":"console_script_setup/#console-script-setup","text":"Optionally, your package can include a console script using Click .","title":"Console Script Setup"},{"location":"console_script_setup/#how-it-works","text":"If the command_line_interface option is set to click during setup, cookiecutter will add a file cli.py in the pkg_name subdirectory. An entry point is added to pyproject.toml that points to the main function in cli.py.","title":"How It Works"},{"location":"console_script_setup/#usage","text":"To use the console script in development: 1 poetry install Then execute: 1 $project_slug --help it will show your package name, project short description and exit.","title":"Usage"},{"location":"console_script_setup/#more-details","text":"You can read more about Python Click at Click .","title":"More Details"},{"location":"faq/","text":"Question Explain these GitHub workflows yaml files? \u00b6 dev.yml : define dev workflow, run on every push and pull requests to master, basically run all the tests against multiple versions and platforms. preview.yml : define stage & preview workflow, run on every push to master, publish dev build to TestPyPI. release.yml : define release & publish workflow, run on every tag push, create GitHub release, publish docs to GitHub Pages and built package to PyPI.","title":"FAQ"},{"location":"faq/#explain-these-github-workflows-yaml-files","text":"dev.yml : define dev workflow, run on every push and pull requests to master, basically run all the tests against multiple versions and platforms. preview.yml : define stage & preview workflow, run on every push to master, publish dev build to TestPyPI. release.yml : define release & publish workflow, run on every tag push, create GitHub release, publish docs to GitHub Pages and built package to PyPI.","title":"Explain these GitHub workflows yaml files?"},{"location":"history/","text":"History \u00b6 v0.1.0 \u00b6 First release, based on https://github.com/waynerv/cookiecutter-pypackage with the following updates: Added makefile Removed deprecated pytest-cookie calls from tests and fixed click test Extended .gitignore Updated python test matrix to start from 3.10 tox refactor automatic creation of a package with most recent dependencies cicd is optional","title":"History"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#v010","text":"First release, based on https://github.com/waynerv/cookiecutter-pypackage with the following updates: Added makefile Removed deprecated pytest-cookie calls from tests and fixed click test Extended .gitignore Updated python test matrix to start from 3.10 tox refactor automatic creation of a package with most recent dependencies cicd is optional","title":"v0.1.0"},{"location":"pypi_release_checklist/","text":"PyPI Release Checklist \u00b6 Before Your First Release \u00b6 You better visit PyPI to make sure your package name is unused. For Every Release \u00b6 Make some pull requests, merge all changes from feature branch to master/main. Update CHANGELOG.md manually. Make sure it follows the Keep a Changelog standard. Be noticed that GitHub workflow will read changelog and extract release notes automatically. Commit the changelog changes: 1 2 git add CHANGELOG.md git commit -m \"Changelog for upcoming release 0.1.1.\" Update version number and automatically create a commit, tag(can also be patch or major). 1 poetry run bump2version minor Run the tests locally for insurance: 1 poetry run tox Push these commits to master/main: 1 git push Before proceeding to the next step, please check workflows triggered by this push have passed. Push the tags(created by bump2version) to master/main, creating the new release on both GitHub and PyPI: 1 git push --tags Only tag name started with 'v'(lower case) will leverage GitHub release workflow. Check the PyPI listing page to make sure that the README, release notes, and roadmap display properly. If tox test passed, this should be ok, since we have already run twine check during tox test. About This Checklist \u00b6 This checklist is adapted from https://cookiecutter-pypackage.readthedocs.io/en/latest/pypi_release_checklist.html . It assumes that you are using all features of Cookiecutter PyPackage.","title":"Release checklist"},{"location":"pypi_release_checklist/#pypi-release-checklist","text":"","title":"PyPI Release Checklist"},{"location":"pypi_release_checklist/#before-your-first-release","text":"You better visit PyPI to make sure your package name is unused.","title":"Before Your First Release"},{"location":"pypi_release_checklist/#for-every-release","text":"Make some pull requests, merge all changes from feature branch to master/main. Update CHANGELOG.md manually. Make sure it follows the Keep a Changelog standard. Be noticed that GitHub workflow will read changelog and extract release notes automatically. Commit the changelog changes: 1 2 git add CHANGELOG.md git commit -m \"Changelog for upcoming release 0.1.1.\" Update version number and automatically create a commit, tag(can also be patch or major). 1 poetry run bump2version minor Run the tests locally for insurance: 1 poetry run tox Push these commits to master/main: 1 git push Before proceeding to the next step, please check workflows triggered by this push have passed. Push the tags(created by bump2version) to master/main, creating the new release on both GitHub and PyPI: 1 git push --tags Only tag name started with 'v'(lower case) will leverage GitHub release workflow. Check the PyPI listing page to make sure that the README, release notes, and roadmap display properly. If tox test passed, this should be ok, since we have already run twine check during tox test.","title":"For Every Release"},{"location":"pypi_release_checklist/#about-this-checklist","text":"This checklist is adapted from https://cookiecutter-pypackage.readthedocs.io/en/latest/pypi_release_checklist.html . It assumes that you are using all features of Cookiecutter PyPackage.","title":"About This Checklist"},{"location":"tutorial/","text":"Tutorial \u00b6 To start with, you will need GitHub , PyPI , TestPyPI and Codecov account. If you don't have one, please follow the links to apply one before you get started on this tutorial. If you are new to Git and GitHub, you should probably spend a few minutes on some tutorials at the top of the page at GitHub Help . Step 1: Install Cookiecutter \u00b6 Install cookiecutter : Step 2: Generate Your Package \u00b6 Now it's time to generate your Python package. Run the following command and feed with answers, If you don\u2019t know what to enter, stick with the defaults: 1 cookiecutter https://github.com/mishamsk/cookiecutter-pypackage.git Finally, a new folder will be created under current folder, the name is the answer you provided to project_slug . Go to this generated folder, the project layout should look like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 . \u251c\u2500\u2500 .bumpversion.cfg \u251c\u2500\u2500 .editorconfig \u251c\u2500\u2500 .github \u2502 \u251c\u2500\u2500 ISSUE_TEMPLATE.md \u2502 \u2514\u2500\u2500 workflows \u2502 \u251c\u2500\u2500 dev.yml \u2502 \u251c\u2500\u2500 preview.yml \u2502 \u2514\u2500\u2500 release.yml \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 .pre-commit-config.yaml \u251c\u2500\u2500 CHANGELOG.md \u251c\u2500\u2500 CONTRIBUTING.md \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 api.md \u2502 \u251c\u2500\u2500 changelog.md \u2502 \u251c\u2500\u2500 contributing.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 installation.md \u2502 \u2514\u2500\u2500 usage.md \u251c\u2500\u2500 makefile \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 my_package \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 cli.py \u2502 \u2514\u2500\u2500 my_package.py \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 setup.cfg \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_my_package.py Here the project_slug is my-package , when you generate yours, it could be other name. Also notice thatthe pyproject.toml in this folder. This is the main configuration file of our project. Step 3: Install Poetry \u00b6 In this step we will install Poetry if you are not using it, since the whole project is managed by it. 1 pip install poetry In addition, Poetry provides a custom installer that will install poetry isolated from the rest of your system by vendorizing its dependencies. This is the recommended way of installing poetry. Step 4: Install Dev Requirements \u00b6 You should still be in the folder named as project_slug , which containing the pyproject.toml file. Install the new project's local development requirements with poetry install : 1 2 poetry install poetry run tox Poetry will create its own virtualenv isolated from your system and install the dependencies in it. We also launch a smoke test here by running poetry run tox . This will run tox within created virtual environment, give you a test report and lint report. You should see no errors except some lint warnings. You can also activate the virtual environment manually with poetry shell , this will create a new shell. Step 5: Create a GitHub Repo \u00b6 Go to your GitHub account and create a new repo named my-package , where my-package matches the project_slug from your answers to running cookiecutter. Then go to repo > settings > secrets, click on 'New repository secret', add the following secrets: TEST_PYPI_API_TOKEN, see How to apply TestPyPI token PYPI_API_TOKEN, see How to apply pypi token PERSONAL_TOKEN, see How to apply personal token Step 6: Set Up codecov integration \u00b6 Tips If you have already setup codecov integration and configured access for all your repositories, you can skip this step. In your browser, visit install codecov app , you'll land at this page: Click on the green install button at top right, choose all repositories then click on install button, following directions until all set. If the repo you created is a private repo, you need to set the following additional secrets, which is not required for public repos: CODECOV_TOKEN, see Codecov GitHub Action - Usage Step 7: Upload code to GitHub \u00b6 Back to your develop environment, find the folder named after the project_slug . Move into this folder, and then setup git to use your GitHub repo and upload the code: 1 2 3 4 5 6 7 cd my-package git add . git commit -m \"Initial commit.\" git branch -M main git remote add origin git@github.com:myusername/my-package.git git push -u origin main Where myusername and my-package are adjusted for your username and repo name. You'll need a ssh key to push the repo. You can Generate a key or Add an existing one. Warning if you answered 'yes' to the question if install pre-commit hooks at last step, then you should find pre-commit be invoked when you run git commit , and some files may be modified by hooks. If so, please add these files and commit again . Check result \u00b6 After pushing your code to GitHub, goto GitHub web page, navigate to your repo, then click on actions link, you should find screen like this: There should be some workflows running. After they finished, go to TestPyPI , check if a new artifact is published under the name project_slug . Step 8. Check documentation \u00b6 Documentation will be published and available at https://{your_github_account}.github.io/{your_repo} once: the commit is tagged, and the tag name is started with 'v' (lower case) build/testing executed by GitHub CI passed If you'd like to see what it's look like now, you could run the following command: 1 poetry run mkdocs serve This will run the builtin development server for you to preview. Step 9. Make official release \u00b6 After done with your phased development in a feature branch, make a pull request, following instructions at release checklist , trigger first official release and check result at PyPI .","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"To start with, you will need GitHub , PyPI , TestPyPI and Codecov account. If you don't have one, please follow the links to apply one before you get started on this tutorial. If you are new to Git and GitHub, you should probably spend a few minutes on some tutorials at the top of the page at GitHub Help .","title":"Tutorial"},{"location":"tutorial/#step-1-install-cookiecutter","text":"Install cookiecutter :","title":"Step 1: Install Cookiecutter"},{"location":"tutorial/#step-2-generate-your-package","text":"Now it's time to generate your Python package. Run the following command and feed with answers, If you don\u2019t know what to enter, stick with the defaults: 1 cookiecutter https://github.com/mishamsk/cookiecutter-pypackage.git Finally, a new folder will be created under current folder, the name is the answer you provided to project_slug . Go to this generated folder, the project layout should look like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 . \u251c\u2500\u2500 .bumpversion.cfg \u251c\u2500\u2500 .editorconfig \u251c\u2500\u2500 .github \u2502 \u251c\u2500\u2500 ISSUE_TEMPLATE.md \u2502 \u2514\u2500\u2500 workflows \u2502 \u251c\u2500\u2500 dev.yml \u2502 \u251c\u2500\u2500 preview.yml \u2502 \u2514\u2500\u2500 release.yml \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 .pre-commit-config.yaml \u251c\u2500\u2500 CHANGELOG.md \u251c\u2500\u2500 CONTRIBUTING.md \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 api.md \u2502 \u251c\u2500\u2500 changelog.md \u2502 \u251c\u2500\u2500 contributing.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 installation.md \u2502 \u2514\u2500\u2500 usage.md \u251c\u2500\u2500 makefile \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 my_package \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 cli.py \u2502 \u2514\u2500\u2500 my_package.py \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 setup.cfg \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_my_package.py Here the project_slug is my-package , when you generate yours, it could be other name. Also notice thatthe pyproject.toml in this folder. This is the main configuration file of our project.","title":"Step 2: Generate Your Package"},{"location":"tutorial/#step-3-install-poetry","text":"In this step we will install Poetry if you are not using it, since the whole project is managed by it. 1 pip install poetry In addition, Poetry provides a custom installer that will install poetry isolated from the rest of your system by vendorizing its dependencies. This is the recommended way of installing poetry.","title":"Step 3: Install Poetry"},{"location":"tutorial/#step-4-install-dev-requirements","text":"You should still be in the folder named as project_slug , which containing the pyproject.toml file. Install the new project's local development requirements with poetry install : 1 2 poetry install poetry run tox Poetry will create its own virtualenv isolated from your system and install the dependencies in it. We also launch a smoke test here by running poetry run tox . This will run tox within created virtual environment, give you a test report and lint report. You should see no errors except some lint warnings. You can also activate the virtual environment manually with poetry shell , this will create a new shell.","title":"Step 4: Install Dev Requirements"},{"location":"tutorial/#step-5-create-a-github-repo","text":"Go to your GitHub account and create a new repo named my-package , where my-package matches the project_slug from your answers to running cookiecutter. Then go to repo > settings > secrets, click on 'New repository secret', add the following secrets: TEST_PYPI_API_TOKEN, see How to apply TestPyPI token PYPI_API_TOKEN, see How to apply pypi token PERSONAL_TOKEN, see How to apply personal token","title":"Step 5: Create a GitHub Repo"},{"location":"tutorial/#step-6-set-up-codecov-integration","text":"Tips If you have already setup codecov integration and configured access for all your repositories, you can skip this step. In your browser, visit install codecov app , you'll land at this page: Click on the green install button at top right, choose all repositories then click on install button, following directions until all set. If the repo you created is a private repo, you need to set the following additional secrets, which is not required for public repos: CODECOV_TOKEN, see Codecov GitHub Action - Usage","title":"Step 6: Set Up codecov integration"},{"location":"tutorial/#step-7-upload-code-to-github","text":"Back to your develop environment, find the folder named after the project_slug . Move into this folder, and then setup git to use your GitHub repo and upload the code: 1 2 3 4 5 6 7 cd my-package git add . git commit -m \"Initial commit.\" git branch -M main git remote add origin git@github.com:myusername/my-package.git git push -u origin main Where myusername and my-package are adjusted for your username and repo name. You'll need a ssh key to push the repo. You can Generate a key or Add an existing one. Warning if you answered 'yes' to the question if install pre-commit hooks at last step, then you should find pre-commit be invoked when you run git commit , and some files may be modified by hooks. If so, please add these files and commit again .","title":"Step 7: Upload code to GitHub"},{"location":"tutorial/#check-result","text":"After pushing your code to GitHub, goto GitHub web page, navigate to your repo, then click on actions link, you should find screen like this: There should be some workflows running. After they finished, go to TestPyPI , check if a new artifact is published under the name project_slug .","title":"Check result"},{"location":"tutorial/#step-8-check-documentation","text":"Documentation will be published and available at https://{your_github_account}.github.io/{your_repo} once: the commit is tagged, and the tag name is started with 'v' (lower case) build/testing executed by GitHub CI passed If you'd like to see what it's look like now, you could run the following command: 1 poetry run mkdocs serve This will run the builtin development server for you to preview.","title":"Step 8. Check documentation"},{"location":"tutorial/#step-9-make-official-release","text":"After done with your phased development in a feature branch, make a pull request, following instructions at release checklist , trigger first official release and check result at PyPI .","title":"Step 9. Make official release"}]}